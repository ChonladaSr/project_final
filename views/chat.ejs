<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Skill Deck</title>
  <link rel="icon" href="https://cdn-icons-png.freepik.com/512/9169/9169949.png?ga=GA1.1.512366322.1722083948">

  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
  <%- include('./font') %>
    <script src="https://cdn.tailwindcss.com"></script>

    <style>
      body {
        font-family: 'Roboto', sans-serif;
        background-color: #f7f7f7;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
      }

      #chat-container {
        width: 500px;
        background: #ffffff;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow: hidden;
      }

      #room-selection,
      #chat-room {
        padding: 20px;
      }

      #room-selection input,
      #room-selection button {
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }

      #room-selection button {
        background-color: #ffa20d;
        color: white;
        border: none;
        cursor: pointer;
        font-weight: bold;
      }

      #room-selection button:hover {
        background-color: #ff9635;
      }

      #chat-room {
        display: none;
      }

      #messages {
        height: 400px;
        overflow-y: scroll;
        border: 1px solid #ddd;
        padding: 10px;
        margin-bottom: 10px;
        background-color: #f1f1f1;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
      }

      .message {
        padding: 10px;
        border-radius: 10px;
        margin-bottom: 10px;
        max-width: 90%;
        align-self: flex-start;
      }

      .message.sent {
        background-color: #dbffb6;
        align-self: flex-end;
        text-align: right;
      }

      .message.received {
        background-color: #e4e4e4;
        align-self: flex-start;
        text-align: left;
      }


      #message-input {
        width: calc(100% - 80px);
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }

      #send-button {
        width: 60px;
        padding: 10px;
        margin-left: 10px;
        background-color: #ffa20d;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
      }

      #send-button:hover {
        background-color: #ff9635;
      }

      #username {
        font-weight: bold;
        margin-bottom: 10px;
      }
    </style>

</head>

<body>
  <div id="room-selection">
    <div class="flex justify-center mb-8">
      <img src="https://img2.pic.in.th/pic/Screenshot-2024-08-06-225808.png" alt="Logo" class="w-21 h-10">
    </div>
    <!-- <fieldset disabled>
      <input id="room-input" class="prompt-regular" type="text" value="<%= teamId %>" readonly />
    </fieldset> -->
    <button id="join-button" class="prompt-regular">เข้าร่วมแชท</button>
  </div>

  <div id="chat-room" style="display: none;">
    <div id="messages" class="prompt-regular"></div>
    <input id="message-input" class="prompt-regular" type="text" placeholder="พิมพ์ข้อความที่นี่..." />
    <button id="send-button" class="prompt-regular">ส่ง</button>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    let currentRoom = '<%= teamId %>';
    const userId = "<%= userId %>"; // User ID from backend
    const teamId = "<%= teamId %>"; // Team ID from backend

    // Join the room when clicking "join-button"
    document.getElementById('join-button').onclick = function () {
      if (teamId) {  // ตรวจสอบว่ามีค่า teamId
        socket.emit("joinRoom", { teamId, userId }); // ส่ง teamId และ userId ไปยัง socket server เพื่อเข้าร่วมห้อง
        document.getElementById('room-selection').style.display = 'none';
        document.getElementById('chat-room').style.display = 'block';
      } else {
        console.error("Team ID is not defined.");
      }
    };

    // Send a message
    document.getElementById('send-button').onclick = function () {
      const message = document.getElementById('message-input').value;
      if (currentRoom && message) {
        const now = new Date(); // เวลาปัจจุบัน
        // ส่ง event chatMessage พร้อมข้อมูล message, room, userId, teamId และ created_at
        socket.emit("chatMessage", {
          room: currentRoom,  // ห้องแชทปัจจุบัน
          message: message,  // ข้อความที่ต้องการส่ง
          userId: userId || null,  // ส่ง userId ถ้ามี
          teamId: teamId || null,  // ส่ง teamId ถ้ามี
          created_at: now.toISOString()  // ส่ง created_at ในรูปแบบ ISO
        });
        document.getElementById('message-input').value = ''; // ล้างช่องข้อความหลังจากส่งแล้ว
      }
    };

    socket.on('loadMessages', (messages) => {
      const messagesContainer = document.getElementById('messages');
      messagesContainer.innerHTML = ''; // ล้างข้อความเก่าออกก่อน

      // แสดงผลข้อความเก่าทั้งหมด
      messages.forEach(message => {
        const messageElement = document.createElement("div");
        messageElement.classList.add('message', 'received');

        // แปลง created_at เป็นเวลาท้องถิ่น (เขตเวลาไทย UTC+7)
        const date = new Date(message.created_at);

        // ฟอร์แมตวันที่และเวลา
        const dateString = date.toLocaleDateString('th-TH', { timeZone: 'Asia/Bangkok' });
        const timeString = date.toLocaleTimeString('th-TH', { timeZone: 'Asia/Bangkok' });

        const metaDataElement = document.createElement("span");
        metaDataElement.classList.add('text-sm', 'text-gray-500');
        metaDataElement.textContent = `${message.name || 'Unknown'} [${dateString} ${timeString}]`;

        const lineBreak = document.createElement("br");
        const messageContent = document.createTextNode(message.message);

        messageElement.appendChild(metaDataElement);
        messageElement.appendChild(lineBreak);
        messageElement.appendChild(messageContent);

        messagesContainer.appendChild(messageElement);
      });

      // เลื่อนลงไปที่ข้อความล่าสุด
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    });

    socket.on("chatMessage", (data) => {
  const messageElement = document.createElement("div");
  messageElement.classList.add('message', 'received');

  // แปลง created_at เป็นเวลาท้องถิ่น (เขตเวลาไทย UTC+7)
  const date = new Date(data.created_at);

  // ฟอร์แมตวันที่และเวลา
  const dateString = date.toLocaleDateString('th-TH', { timeZone: 'Asia/Bangkok' });
  const timeString = date.toLocaleTimeString('th-TH', { timeZone: 'Asia/Bangkok' });

  const metaDataElement = document.createElement("span");
  metaDataElement.classList.add('text-sm', 'text-gray-500');
  metaDataElement.textContent = `${data.username || 'Unknown'} [${dateString} ${timeString}]`; // ใช้ username ที่ส่งจาก server

  const lineBreak = document.createElement("br");
  const messageContent = document.createTextNode(data.message);

  messageElement.appendChild(metaDataElement);
  messageElement.appendChild(lineBreak);
  messageElement.appendChild(messageContent);

  document.getElementById('messages').appendChild(messageElement);
  document.getElementById('messages').scrollTop = document.getElementById('messages').scrollHeight;
});


    // Display server messages
    socket.on('message', (msg) => {
      const messageElement = document.createElement("div");
      messageElement.classList.add('message', 'received');
      messageElement.textContent = msg;
      document.getElementById('messages').appendChild(messageElement);
      document.getElementById('messages').scrollTop = document.getElementById('messages').scrollHeight;
    });

  </script>
</body>

</body>


</html>