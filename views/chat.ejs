<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Skill Deck</title>
  <link rel="icon" href="https://cdn-icons-png.freepik.com/512/9169/9169949.png?ga=GA1.1.512366322.1722083948">

  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
  <%- include('./font') %>
    <script src="https://cdn.tailwindcss.com"></script>

    <style>
      body {
        font-family: 'Roboto', sans-serif;
        background-color: #f7f7f7;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
      }

      #chat-container {
        width: 500px;
        background: #ffffff;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow: hidden;
      }

      #room-selection,
      #chat-room {
        padding: 20px;
      }

      #room-selection input,
      #room-selection button {
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }

      #room-selection button {
        background-color: #ffa20d;
        color: white;
        border: none;
        cursor: pointer;
        font-weight: bold;
      }

      #room-selection button:hover {
        background-color: #ff9635;
      }

      #chat-room {
        display: none;
      }

          #messages {
        height: 400px;
        overflow-y: scroll;
        border: 1px solid #ddd;
        padding: 10px;
        margin-bottom: 10px;
        background-color: #f1f1f1;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
      }
 /*  
      .message {
        padding: 10px;
        border-radius: 10px;
        margin-bottom: 10px;
        max-width: 90%;
        align-self: flex-start;
      } 

      .message.sent {
        background-color: #dbffb6;
        align-self: flex-end;
        text-align: right;
      }

      .message.received {
        background-color: #e4e4e4;
        align-self: flex-start;
        text-align: left;
      }
*/

      #message-input {
        width: calc(100% - 80px);
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }

      #send-button {
        width: 60px;
        padding: 10px;
        margin-left: 10px;
        background-color: #ffa20d;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
      }

      #send-button:hover {
        background-color: #ff9635;
      }

      #username {
        font-weight: bold;
        margin-bottom: 10px;
      }

      /* Container for all messages */
      #messages {
        max-height: 400px;
        /* Maximum height for the message container */
        overflow-y: auto;
        /* Scrollable when messages exceed height */
        padding: 10px;
        /* Padding around the container */
        background-color: #f9f9f9;
        /* Light background color */
        border: 1px solid #ddd;
        /* Light border */
        border-radius: 5px;
        /* Rounded corners */
      }

      /* General message styling */
      .message {
        margin-bottom: 10px;
        /* Space between messages */
        padding: 8px;
        /* Padding inside message boxes */
        border-radius: 5px;
        /* Rounded corners for messages */
      }

      /* Styling for messages sent by the user */
      .sent {
        background-color: #e1ffc7;
        /* Light green background for sent messages */
        text-align: right;
        /* Align text to the right */
        margin-left: auto;
        /* Push to the right */
        max-width: 70%;
        /* Limit width of sent messages */
      }

      /* Styling for messages received from the team */
      .received {
        background-color: #f1f1f1;
        /* Light gray background for received messages */
        text-align: left;
        /* Align text to the left */
        margin-right: auto;
        /* Push to the left */
        max-width: 70%;
        /* Limit width of received messages */
      }

      /* Optional: Style for the message timestamp */
      .text-sm {
        font-size: 0.875rem;
        /* Smaller font size */
      }

      .text-gray-500 {
        color: #6b7280;
        /* Gray text color */
      }
    </style>
</head>


<body>
  <div id="room-selection">
    <div class="flex justify-center mb-8">
      <img src="https://img2.pic.in.th/pic/Screenshot-2024-08-06-225808.png" alt="Logo" class="w-21 h-10">
    </div>
    <!--     <fieldset disabled>
      <input id="room-input" class="prompt-regular" type="text" value="<%= teamId %>" readonly />
    </fieldset> -->
    <button id="join-button" class="prompt-regular">เข้าร่วมแชท</button>
  </div>

  <div id="chat-room" style="display: none;">
    <div id="messages" class="prompt-regular"></div>
    <input id="message-input" class="prompt-regular" type="text" placeholder="พิมพ์ข้อความที่นี่..." />
    <button id="send-button" class="prompt-regular">ส่ง</button>
  </div>

  <script src="/socket.io/socket.io.js"></script>

  <script>
    const socket = io();
    const userId = "<%= userId %>"; // User ID from backend
    const teamId = "<%= teamId %>"; // Team ID from backend
    let currentRoom = `${teamId}-${userId}`; // Combine teamId and userId for room


    // Join the room when clicking "join-button"
    document.getElementById('join-button').onclick = function () {
      if (currentRoom) {
        socket.emit("joinPrivateChat", { teamId, userId }); // Emit joinPrivateChat
        document.getElementById('room-selection').style.display = 'none';
        document.getElementById('chat-room').style.display = 'block';
      }
    };

    // Send a message
    document.getElementById('send-button').onclick = function () {
      const message = document.getElementById('message-input').value;
      if (currentRoom && message) {
        socket.emit("chatMessage", {
          room: currentRoom,
          message: message,
          userId: userId || null,
          teamId: teamId || null,
        });
        document.getElementById('message-input').value = ''; // Clear input
      }
    };

    socket.on('loadMessages', (messages) => {
      const messagesContainer = document.getElementById('messages');
      messagesContainer.innerHTML = ''; // Clear existing messages

      messages.forEach((message) => {
        const messageElement = document.createElement("div");

        // Check sender type and apply the appropriate class
        if (message.sender_type === 'team') {
          messageElement.classList.add('message', 'received'); // Left side
        } else if (message.sender_type === 'user') {
          messageElement.classList.add('message', 'sent'); // Right side
        }

        // Format the received message
        const date = new Date(message.created_at); // Assuming you have created_at in your message object
        const dateString = date.toLocaleDateString('th-TH', { year: 'numeric', month: 'long', day: 'numeric' });
        const timeString = date.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' });

        // Update innerHTML with styling
        messageElement.innerHTML = `
     
      <span class="text-gray text-sm">${dateString} ${timeString}</span><br>
      <span>${message.message}</span>
    `;
        messagesContainer.appendChild(messageElement);
      });
    });

    socket.on("chatMessage", (data) => {
      const messagesContainer = document.getElementById('messages');
      const messageElement = document.createElement("div");

      // Check sender type and apply the appropriate class
      if (data.sender_type === 'team') {
        messageElement.classList.add('message', 'received'); // Left side
      } else if (data.sender_type === 'user') {
        messageElement.classList.add('message', 'sent'); // Right side
      }

      // Format the received message
      const date = new Date();
      const dateString = date.toLocaleDateString('th-TH', { year: 'numeric', month: 'long', day: 'numeric' });
      const timeString = date.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' });

      // Update innerHTML with styling
      messageElement.innerHTML = `
    <span class="text-gray text-sm">${dateString} ${timeString}</span><br>
    <span>${data.message}</span>
  `;

      messagesContainer.appendChild(messageElement);

      // Scroll to the latest message
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    });

    // Load users when the page is loaded
    socket.emit("getChatUsers", teamId);
    
  </script>



</body>

</html>